@page "/"
@using Pokedex.Components.Models
@using Pokedex.Components.Util
@inject PokeClient client

<PageTitle>Home</PageTitle>

<h1 class="text-center my-4">Hello, world!</h1>

<div class="container">
    <div class="text-center mb-4">
        <h3>Pokedex</h3>
    </div>
    <div class="row">
        @foreach (var pokemon in pokemons)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <img src="@pokemon.sprites.front_default" class="card-img-top" alt="@pokemon.name">
                    <div class="card-body">
                        <h5 class="card-title">@pokemon.name</h5>
                        <p class="card-text">ID: @pokemon.id</p>
                        <p class="card-text">Height: @pokemon.height</p>
                        <p class="card-text">Weight: @pokemon.weight</p>
                        <p class="card-text">Base Experience: @pokemon.base_experience</p>
                        <p class="card-text">
                            Type: 
                            @foreach (var type in pokemon.types)
                            {
                                <span class="@(GetTypeClass(type.type.name))">@type.type.name</span>
                            }
                        </p>
                        <p class="card-text">Moves:</p>
                        <ul>
                            @foreach (var move in pokemon.moves.Take(5)) // Displaying first 5 moves for brevity
                            {
                                <li>@move.move.name</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    List<Pokemon> pokemons = new List<Pokemon>();

    protected override async Task OnInitializedAsync()
    {
        var tasks = new List<Task<Pokemon>>();
        for (int i = 1; i <= 9; i++)
        {
            tasks.Add(client.GetPokemon(i.ToString()));
        }

        pokemons = (await Task.WhenAll(tasks)).ToList();
    }

    private string GetTypeClass(string typeName)
    {
        return typeName.ToLower() switch
        {
            "grass" => "type-grass",
            "fire" => "type-fire",
            "water" => "type-water",
            "electric" => "type-electric",
            "ice" => "type-ice",
            "fighting" => "type-fighting",
            "poison" => "type-poison",
            "ground" => "type-ground",
            "flying" => "type-flying",
            "psychic" => "type-psychic",
            "bug" => "type-bug",
            "rock" => "type-rock",
            "ghost" => "type-ghost",
            "dragon" => "type-dragon",
            "dark" => "type-dark",
            "steel" => "type-steel",
            "fairy" => "type-fairy",
            _ => ""
        };
    }
}