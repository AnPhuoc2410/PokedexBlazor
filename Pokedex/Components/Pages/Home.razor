@page "/"
@rendermode InteractiveServer
@using Pokedex.Components.Models
@using Pokedex.Components.Util
@inject PokeClient client
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

@if (isLoading)
{
    <div class="loading-overlay">
        <img class="pokeball-spinner" src="img/pokeball.png" alt="Loading..." />
    </div>
}

<div class="container">
    <img class="text-center w-75" src="img/PokedexBlazor.png" alt="Title" />
    <div class="row g-4 d-flex flex-wrap justify-content-center align-items-center">
        @foreach (var pokemon in DisplayedPokemons)
        {
            <div class="col-lg-4 col-md-6">
                <div class="card pokemon-card border-0 rounded" style="height: 100%;" @onclick="() => NavigateToDetails(pokemon.id)">
                    <!-- ID Badge in the Corner -->
                    <div class="pokemon-id-badge">
                        <strong>#@pokemon.id</strong>
                    </div>
                    <img src="@pokemon.sprites.front_default" class="card-img-top rounded-top" alt="@pokemon.name" loading="lazy">
                    <div class="card-body">
                        <h5 class="card-title pokemon-name">@pokemon.name</h5>
                        <div class="mb-2">
                            <div class="d-flex justify-content-center gap-1 mt-1">
                                @foreach (var type in pokemon.types)
                                {
                                    <span class="type-badge" style="background-color:@(TypeColor.GetColor(type.type.name))">@type.type.name.ToUpper()</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination Controls -->
    <nav class="pagination-container">
        <ul class="pagination">
            @for (int i = 1; i <= TotalPages; i++)
            {
                <li class="page-item @(CurrentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                </li>
            }
        </ul>
    </nav>
</div>

@if (pokemons.Count == 0 && !isLoading)
{
    <div class="text-center my-5">
        <p>No Pokémon found.</p>
    </div>
}

@code {
    private List<Pokemon> pokemons = new List<Pokemon>();
    private List<Pokemon> DisplayedPokemons = new List<Pokemon>();
    private int ItemsPerPage = 9; // Number of items per page
    private int CurrentPage = 1;
    private int TotalPages = 1;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllPokemons();
        UpdateDisplayedPokemons();
    }

    private async Task LoadAllPokemons()
    {
        isLoading = true;
        try
        {
            var tasks = new List<Task<Pokemon>>();
            for (int i = 1; i <= 151; i++) // Load all Pokémon (up to 151)
            {
                tasks.Add(client.GetPokemon(i.ToString()));
            }
            pokemons = (await Task.WhenAll(tasks)).ToList();

            // Calculate the total number of pages
            TotalPages = (int)Math.Ceiling((double)pokemons.Count / ItemsPerPage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Pokémon: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdateDisplayedPokemons()
    {
        // Determine the Pokémon to display based on the current page
        int startIndex = (CurrentPage - 1) * ItemsPerPage;
        int endIndex = Math.Min(startIndex + ItemsPerPage, pokemons.Count);

        DisplayedPokemons = pokemons.Skip(startIndex).Take(endIndex - startIndex).ToList();
    }

    private void ChangePage(int page)
    {
        if (page < 1 || page > TotalPages) return;

        CurrentPage = page;
        UpdateDisplayedPokemons();
    }

    private void NavigateToDetails(int pokeID)
    {
        Navigation.NavigateTo($"/pokeapi/{pokeID}");
    }
}
