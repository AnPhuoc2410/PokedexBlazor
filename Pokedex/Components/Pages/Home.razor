@page "/"
@using Pokedex.Components.Models
@using Pokedex.Components.Util
@inject PokeClient client

<PageTitle>Home</PageTitle>
<div class="container">
    <img class="text-center w-75" src="img/PokedexBlazor.png" alt="Title" />
    <div class="row g-4 d-flex flex-wrap justify-content-center align-items-center">
        @foreach (var pokemon in pokemons)
        {
            <div class="col-lg-4 col-md-6">
                <div class="card shadow-sm h-100 border-0 rounded">
                    <img src="@pokemon.sprites.front_default" class="card-img-top rounded-top" alt="@pokemon.name" loading="lazy">
                    <div class="card-body pokemon-card">
                        <h5 class="card-title pokemon-name">@pokemon.name</h5>
                        <div class="d-flex justify-content-between mb-2">
                            <p class="mb-0"><strong>ID:</strong> @pokemon.id</p>
                            <p class="mb-0"><strong>Height:</strong> @pokemon.height</p>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <p class="mb-0"><strong>Weight:</strong> @pokemon.weight</p>
                            <p class="mb-0"><strong>Base XP:</strong> @pokemon.base_experience</p>
                        </div>
                        <div class="mb-2">
                            <div class="d-flex justify-content-center gap-1 mt-1">
                                @foreach (var type in pokemon.types)
                                {
                                    <span class="badge" style="background-color:@(TypeColor.GetColor(type.type.name)); color: white;">@type.type.name.ToUpper()</span>
                                }
                            </div>
                        </div>
                        <div>
                            <strong>Moves:</strong>
                            <div class="d-flex flex-wrap gap-2 mt-2">
                                @foreach (var move in pokemon.moves.Take(5))
                                {
                                    <span class="badge bg-light text-dark border">@move.move.name</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@if (pokemons.Count == 0)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading Pokémon...</p>
    </div>
}

@code {
    List<Pokemon> pokemons = new List<Pokemon>();

    protected override async Task OnInitializedAsync()
    {
        var tasks = new List<Task<Pokemon>>();
        for (int i = 1; i <= 9; i++)
        {
            tasks.Add(client.GetPokemon(i.ToString()));
            StateHasChanged();
        }

        pokemons = (await Task.WhenAll(tasks)).ToList();
    }
}
